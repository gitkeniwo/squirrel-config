patch:
  schema_list:
    - schema: double_pinyin_flypy # 小鹤双拼
    - schema: luna_pinyin # 全拼
    # - schema: double_pinyin # 自然码
  switcher/hotkeys:
    - "Control+grave" # 注意是control+`，不是command+`
  switcher/save_options:
    - full_shape
    - ascii_punct
    - simplification
    - zh_hans
    - emoji_suggestion
  menu/page_size: 8

  # 中西文切換鍵的默認設置寫在 default.yaml 裏面
  # 以下的 default.custom.yaml 在全局範圍重定義該組快速鍵
  #
  # 可用的按鍵有 Caps_Lock, Shift_L, Shift_R, Control_L, control_R
  # Mac 系統上的鼠鬚管不能區分左、右，因此只有對 Shift_L, Control_L 的設定起作用
  #
  # 已輸入編碼時按切換鍵，可以進一步設定輸入法中西文切換的形式。
  # 可選的臨時切換策略有三：
  # inline_ascii 在輸入法的臨時西文編輯區內輸入字母、數字、符號、空格等，回車上屏後自動復位到中文
  # commit_text 已輸入的候選文字上屏並切換至西文輸入模式
  # commit_code 已輸入的編碼字符上屏並切換至西文輸入模式
  # 設爲 noop，屏蔽該切換鍵
  #
  # 如果要把 Caps Lock 設爲只改變字母的大小寫而不做中西文切換，可將 Caps_Lock 對應的切換方式設爲 noop
  # 如果要以 Caps Lock 切換到西文模式，默認輸出小寫字母，請置 ascii_composer/good_old_caps_lock: false
  # 如果要以 Caps Lock 切換到西文模式，默認輸出大寫字母，請使用以下設置：

  ascii_composer: # 设置caps、shift、control等键的作用
    good_old_caps_lock: false # 若为true，caps只切换大小写
    switch_key:
      Shift_L: noop # 禁用 shift 切换中/英
      Shift_R: noop  
      Control_L: noop
      Control_R: noop
      Caps_Lock: commit_code
      Eisu_toggle: clear
  key_binder/bindings: # 设置哪些键可以翻页，需要哪个取消注释即可
    # - { when: composing, accept: Tab, send: Page_Up } # Tab 翻页
    - { when: composing, accept: Tab, send: Right } # Tab 移动光标向右
    - { when: composing, accept: Shift+Tab, send: Page_Up }
    - { when: paging, accept: minus, send: Page_Up }
    - { when: has_menu, accept: equal, send: Page_Down }
    - { when: paging, accept: bracketleft, send: Page_Up }
    - { when: has_menu, accept: bracketright, send: Page_Down }
    # - {accept: "Control+p", send: Up, when: composing}
    # - {accept: "Control+n", send: Down, when: composing}
    # - {accept: "Control+b", send: Left, when: composing}
    # - {accept: "Control+f", send: Right, when: composing}
    # - {accept: "Control+a", send: Home, when: composing}
    # - {accept: "Control+e", send: End, when: composing}
    # - {accept: "Control+d", send: Delete, when: composing}
    # - {accept: "Control+k", send: "Shift+Delete", when: composing}
    # - {accept: "Control+h", send: BackSpace, when: composing}
    # - {accept: "Control+g", send: Escape, when: composing}
    # - {accept: "Control+bracketleft", send: Escape, when: composing}
    # - { when: has_menu, accept: semicolon, send: 2 }
    # - { when: has_menu, accept: apostrophe, send: 3 }
    # - {accept: comma, send: Page_Up, when: paging}
    # - {accept: period, send: Page_Down, when: has_menu}
    # - {accept: "Control+Shift+1", select: .next, when: always}
    # - {accept: "Control+Shift+2", toggle: ascii_mode, when: always}
    # - {accept: "Control+Shift+3", toggle: full_shape, when: always}
    # - {accept: "Control+Shift+4", toggle: simplification, when: always}
    # - {accept: "Control+Shift+5", toggle: extended_charset, when: always}
    # - {accept: "Control+Shift+exclam", select: .next, when: always}
    # - {accept: "Control+Shift+at", toggle: ascii_mode, when: always}
    # - {accept: "Control+Shift+numbersign", toggle: full_shape, when: always}
    # - {accept: "Control+Shift+dollar", toggle: simplification, when: always}
    # - {accept: "Control+Shift+percent", toggle: extended_charset, when: always}
    # - {accept: "Shift+space", toggle: full_shape, when: always}
    # - {accept: "Control+period", toggle: ascii_punct, when: always}
